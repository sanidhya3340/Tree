
/*
Binary Tree Properties
1) The maximum number of nodes at level ‘l’ of a binary tree is 2l.
2) Maximum number of nodes in a binary tree of height ‘h’ is 2h – 1.
3) In a Binary Tree with N nodes, minimum possible height or minimum number of levels is  ? Log2(N+1) ?
4) A Binary Tree with L leaves has at least   ? Log2L ? + 1   levels
*/
#include <stdio.h>
#include <stdlib.h>
typedef struct bin_tree node;
struct bin_tree
{
    int data;
    node *right;
    node *left;

};
//inserting a node in a tree
void insert(node **tree,int val)
{
    node *temp=NULL;
    if(!(*tree))
    {
        temp=(node*)malloc(sizeof(node));
        temp->left=temp->right=NULL;
        temp->data=val;
        *tree=temp;
        return;
    }
    if(val<(*tree)->data)
    {
        insert(&(*tree)->left,val);
    }
    else if(val>(*tree)->data)
    {
        insert(&(*tree)->right,val);
    }
}
//inorder traversal and printing
void inorder_print(node *tree)
{
    if(tree)
    {
        inorder_print(tree->left);
        printf("%d ",tree->data);
        inorder_print(tree->left);
    }
}
//preorder traversal and printing
void preorder_print(node *tree)
{
    if(tree)
    {
        printf("%d ",tree->data);
        preorder_print(tree->left);
        preorder_print(tree->right);
    }
}
//postorder traversal and printing
void postorder_print(node *tree)
{
    if(tree)
    {
        postorder_print(tree->left);
        postorder_print(tree->right);
        printf("%d ",tree->data);
    }
}
//deleting a tree
void delete_tree(node *tree)
{
    if(tree)
    {

        delete_tree(tree->left);
        delete_tree(tree->right);
        free(tree);
    }
}
//search an element in a binary tree
node* search(node **tree,int val)
{
    if(!(*tree))
    {
        printf("\nTree is empty");
        return NULL;
    }
    if(val< (*tree)->data)
    {
        search(&((*tree)->left),val);
    }
    else if(val > (*tree)->data)
    {
        search(&((*tree)->right),val);
    }
    else if(val==(*tree)->data)
    {
        return *tree;
    }
}
int main()
{
    node *root=NULL;
    node *tmp;
    //int i;


    /* Inserting nodes into tree */
    insert(&root, 9);
    insert(&root, 4);
    insert(&root, 15);
    insert(&root, 6);
    insert(&root, 12);
    insert(&root, 17);
    insert(&root, 2);

    /* Printing nodes of tree */
    printf("Pre Order Display\n");
    preorder_print(root);

    printf("In Order Display\n");
    inorder_print(root);

    printf("Post Order Display\n");
    postorder_print(root);

    /* Search node into tree */
    tmp = search(&root, 4);
    if (tmp)
    {
        printf("Searched node=%d\n", tmp->data);
    }
    else
    {
        printf("Data Not found in tree.\n");
    }

    /* Deleting all nodes of tree */
    delete_tree(root);
    return 0;
}
