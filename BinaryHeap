#include <bits/stdc++.h>

using namespace std;

void swap(int *x,int *y);

class MiniHeap
{
    int *harr;
    int capacity;
    int heap_size;
public:
    MiniHeap(int capacity);
    void Heapify(int );
    int parent(int i){return (i-1)/2;}
    int left(int i) { return (2*i + 1); }
    int right(int i) { return (2*i + 2); }
    int extractmin();
    void decreasekey(int i,int new_val);
    int getMin() { return harr[0]; }
    void insertKey(int k);
    void deleteKey(int i);
    void MinHeapify(int i);
};

MiniHeap::MiniHeap(int cap)
{
    heap_size=0;
    capacity=cap;
    harr=new int[cap];
}

void MiniHeap::insertKey(int k)
{
    if(heap_size==capacity)
    {
        cout<<"Overflow : Could not insert the key"<<endl;
        return;
    }
    heap_size++;
    int i=heap_size-1;
    harr[i]=k;

    while(i != 0 && harr[parent(i)]>harr[i])
    {
        swap(&harr[i],&harr[parent(i)]);
        i = parent(i);
    }
}

void MiniHeap::MinHeapify(int i)
{
    int l=left(i);
    int r=right(i);
    int smallest=i;
    if(l==heap_size && harr[l]>harr[r])
        smallest=l;
    if(r==heap_size && harr[r]<harr[smallest])
        smallest=r;
    if(smallest!=i)
    {
        swap(&harr[i],&harr[smallest]);

    }
}

void MiniHeap::decreasekey(int i,int new_val)
{
    harr[i] = new_val;
    while(i != 0 && harr[parent(i)]>harr[i])
    {
        swap(&harr[i],&harr[parent(i)]);
        i = parent(i);
    }
}

int MiniHeap::extractmin()
{
    if(heap_size<=0)
        return INT_MAX;
    if(heap_size==1)
    {
        heap_size--;
        return harr[0];
    }
    int root=harr[0];
    harr[0]=harr[heap_size-1];
    heap_size--;
    MinHeapify(0);
    return root;
}

void MiniHeap::deleteKey(int i)
{
    decreasekey(i,INT_MIN);
    extractmin();
}


void swap(int *x,int *y)
{
    int temp=*x;
    *x=*y;
    *y=temp;
}
int main()
{
    MiniHeap h(11);
    h.insertKey(3);
    h.insertKey(2);
    h.deleteKey(1);
    h.insertKey(15);
    h.insertKey(5);
    h.insertKey(4);
    h.insertKey(45);
    cout << h.extractmin() << " ";
    cout << h.getMin() << " ";
    h.decreasekey(2, 1);
    cout << h.getMin();
    return 0;
}
